name: Python build and test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ./app/app/requirements.txt ]; then pip install -r ./app/app/requirements.txt; fi
      - name: Run Tests
        run: |
          python -m pytest -v
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install SonarQube Scanner
      run: |
        apt-get update
        apt-get install sonar-scanner
    - name: Set SonarQube properties
      run: |
        echo "sonar.host.url=http://localhost:9000" >> sonar-scanner.properties
        echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-scanner.properties
    - name: Test Python application with SonarQube
      run: sonar-scanner
  sonarqube:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    steps:
#    - uses: actions/checkout@v3
#    - name: Login to Azure
#      uses: azure/login@v2
#      with:
#        creds: ${{ secrets.AZURE_CREDENTIALS_SONARQUBE }}
#    - name: Start App Service
#      run: |
#        az webapp start --name sonarqube-instance --resource-group DevOps-Projekt-Automated
#    - name: Run static code analysis
#      run: |
#        sonar-scanner
#        -Dsonar.projectKey=DevOps-WebApp
#        -Dsonar.sources=./../../app/app
#        -Dsonar.python.pylint.enabled=true
#        -Dsonar.python.pycodestyle.enabled=true
#        -Dsonar.python.pydocstyle.enabled=true
#    - name: Fail pipeline if code quality thresholds are not met
#      run: |
#        sonar-scanner-report
#        --format=json
#        --output-file=sonar-report.json
#      id: sonar-report
#    - name: Parse Sonarqube report
#      uses: jbake/json-parse-action@v1.0.1
#      with:
#        json_file: sonar-report.json
#      id: sonar-parsed
#    - name: Fail pipeline if code coverage is below threshold
#      if: ${{ steps.sonar-parsed.outputs.coverage < 80 }}
#      run: exit 1
#    - name: Fail pipeline if number of code smells is above threshold
#      if: ${{ steps.sonar-parsed.outputs.code_smells > 10 }}
#      run: exit 1
#    - name: Fail pipeline if number of vulnerabilities is above threshold
#      if: ${{ steps.sonar-parsed.outputs.vulnerabilities > 5 }}
#      run: exit 1
#    - name: Fail pipeline if number of bugs is above threshold
#      if: ${{ steps.sonar-parsed.outputs.bugs > 3 }}
#      run: exit 1
#- name: Analyse mit Sonarqube
#  uses: sonarsource/sonarqube-scanner-github-action@v1
#  with:
#    sonar-host: http://<your_local_ip_address>:<sonarqube_port>
#    sonar-project-key: <your_project_key>
#    sonar-project-name: <your_project
